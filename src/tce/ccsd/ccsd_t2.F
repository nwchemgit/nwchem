      SUBROUTINE ccsd_t2(rtdb,d_f1,d_i0,d_t1,d_t2,d_v2,
     &                   k_f1_offset,k_i0_offset,k_t1_offset,
     &                   k_t2_offset,k_v2_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_v + = 1 * v ( p3 p4 h1 h2 )_v                                                         DONE
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v             DONE
C         i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v                                                   DONE
C         i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v               DONE
C             i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v                                            DONE
C             i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
C                 i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v                                         DONE
C                 i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
C             i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
C             i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v                                               DONE
C             i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
C         i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
C             i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f                                                           DONE
C             i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
C             i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v                                               DONE
C             i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i1 ( p3 p4 h2 p5 )_v               UNUSED (NOPE)
C         i1 ( p3 p4 h1 p5 )_v + = 1 * v ( p3 p4 h1 p5 )_v                                                    UNUSED (NOPE)
C         i1 ( p3 p4 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( p3 p4 p5 p6 )_v                   UNUSED (NOPE)
C     i0 ( p3 p4 h1 h2 )_tf + = -1 * P( 2 ) * Sum ( h9 ) * t ( p3 p4 h1 h9 )_t * i1 ( h9 h2 )_f
C         i1 ( h9 h1 )_f + = 1 * f ( h9 h1 )_f                                                                 DONE
C         i1 ( h9 h1 )_ft + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 p8 )_f                                  DONE
C             i2 ( h9 p8 )_f + = 1 * f ( h9 p8 )_f                                                             DONE
C             i2 ( h9 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p8 )_v
C         i1 ( h9 h1 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 h1 p6 )_v
C         i1 ( h9 h1 )_vt + = -1/2 * Sum ( h8 p6 p7 ) * t ( p6 p7 h1 h8 )_t * v ( h8 h9 p6 p7 )_v
C     i0 ( p3 p4 h1 h2 )_tf + = 1 * P( 2 ) * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i1 ( p4 p5 )_f                 DONE
C         i1 ( p3 p5 )_f + = 1 * f ( p3 p5 )_f                                                                 DONE
C         i1 ( p3 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 p3 p5 p6 )_v
C         i1 ( p3 p5 )_vt + = -1/2 * Sum ( h7 h8 p6 ) * t ( p3 p6 h7 h8 )_t * v ( h7 h8 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1/2 * Sum ( h11 h9 ) * t ( p3 p4 h9 h11 )_t * i1 ( h9 h11 h1 h2 )_v
C         i1 ( h9 h11 h1 h2 )_v + = -1 * v ( h9 h11 h1 h2 )_v                                                  DONE
C         i1 ( h9 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 h11 h2 p8 )_v
C             i2 ( h9 h11 h1 p8 )_v + = 1 * v ( h9 h11 h1 p8 )_v                                               DONE
C             i2 ( h9 h11 h1 p8 )_vt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h9 h11 p6 p8 )_v
C         i1 ( h9 h11 h1 h2 )_vt + = -1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h9 h11 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 4 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 p4 h2 p5 )_v
C         i1 ( h6 p3 h1 p5 )_v + = 1 * v ( h6 p3 h1 p5 )_v                                                     DONE
C         i1 ( h6 p3 h1 p5 )_vt + = -1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( h6 p3 p5 p7 )_v
C         i1 ( h6 p3 h1 p5 )_vt + = -1/2 * Sum ( h8 p7 ) * t ( p3 p7 h1 h8 )_t * v ( h6 h8 p5 p7 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "rtdb.fh"
#include "tce.fh"
#include "tce_main.fh"
      integer rtdb             ! Run-time database
c when local copies of  T1/X1 tensors are used,  d_t1 refers to k_t1_local (kk)
c local copies of the most important 2-dimensional intermediates
c ccsd_t2_4(...) and ccsd_t2_5(...) (kk)
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
c      INTEGER size_t2
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      INTEGER size_i3
      INTEGER d_f1
      INTEGER k_f1_offset
c - T1/X1 LOCALIZATION -------------------
      integer l_i1_local,k_i1_local
c ---------------------------------------
      CHARACTER*255 filename
      logical nodezero         ! True if node 0
      double precision cpu     ! CPU sec counter
      double precision wall    ! WALL sec counter
      integer ccsd_t2_8_alg
      integer p,h,maxp,maxh
      integer profile
      double precision tt0,tt1,t2timers(50)
      nodezero=(ga_nodeid().eq.0)
c
      if (.not.rtdb_get(rtdb,'tce:term_profiling',mt_int,1,
     1                  profile)) then
        profile = 0
      endif
c
c Here we determine the maximum tile dimension
c for p and h tiles so we can allocate MA buffers
c up front once rather than in a loop.
c
c As a lose upper bound, we can use tile_dim instead,
c but for occupied tiles, this may be a very loose bound.
c
      maxp = 0
      do p = noab+1,noab+nvab
         maxp = max(maxp,int_mb(k_range+p-1))
      enddo
      maxh = 0
      do h = 1,noab
         maxh = max(maxh,int_mb(k_range+h-1))
      enddo
c
      CALL ccsd_t2_1(d_v2,k_v2_offset,d_i0,k_i0_offset)
      CALL OFFSET_ccsd_t2_2_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_t2_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_t2_2_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsd_t2_2_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsd_t2_2_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsd_t2_2_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL OFFSET_ccsd_t2_2_2_2_1(l_i3_offset,k_i3_offset,size_i3)
      CALL TCE_FILENAME('ccsd_t2_2_2_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL ccsd_t2_2_2_2_1(d_v2,k_v2_offset,d_i3,k_i3_offset)
      CALL ccsd_t2_2_2_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                     d_i3,k_i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL ccsd_t2_2_2_2(d_t1,k_t1_offset,d_i3,k_i3_offset,
     1                   d_i2,k_i2_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL ccsd_t2_2_2_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsd_t2_2_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL OFFSET_ccsd_t2_2_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsd_t2_2_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsd_t2_2_4_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ccsd_t2_2_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsd_t2_2_4(d_t2,k_t2_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL OFFSET_ccsd_t2_2_5_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsd_t2_2_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsd_t2_2_5_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL ccsd_t2_2_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsd_t2_2_5(d_t2,k_t2_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL c2f_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
      CALL ccsd_t2_2_6(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL c2d_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset) 
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsd_t2_2(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL lccsd_t2_3x(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i0,k_i0_offset)
      CALL OFFSET_ccsd_t2_4_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_t2_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_t2_4_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsd_t2_4_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsd_t2_4_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsd_t2_4_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ccsd_t2_4_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsd_t2_4_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL ccsd_t2_4_3(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL ccsd_t2_4_4(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
c - T1/X1 LOCALIZATION ----------
        if (.not.MA_PUSH_GET(mt_dbl,size_i1,'i1_local',
     1      l_i1_local,k_i1_local))
     1      call errquit('i1_local',1,MA_ERR)
        call ma_zero(dbl_mb(k_i1_local),size_i1)
c    copy d_t1 ==> l_t1_local
        call ga_get(d_i1,1,size_i1,1,1,dbl_mb(k_i1_local),size_i1)
c -------------------------------
ccx      CALL ccsd_t2_4(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL ccsd_t2_4(d_t2,k_t2_offset,k_i1_local,k_i1_offset,
     &              d_i0,k_i0_offset)
c - T1/X1 LOCALIZATION --
         if(.not.MA_POP_STACK(l_i1_local))
     &      call errquit('l_i1_local',2,MA_ERR)
c -----------------------
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL OFFSET_ccsd_t2_5_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_t2_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_t2_5_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsd_t2_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL ccsd_t2_5_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
c - T1/X1 LOCALIZATION ----------
        if (.not.MA_PUSH_GET(mt_dbl,size_i1,'i1_local',
     1      l_i1_local,k_i1_local))
     1      call errquit('i1_local',1,MA_ERR)
        call ma_zero(dbl_mb(k_i1_local),size_i1)
c    copy d_t1 ==> l_t1_local
        call ga_get(d_i1,1,size_i1,1,1,dbl_mb(k_i1_local),size_i1)
c -------------------------------
ccx      CALL ccsd_t2_5(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL ccsd_t2_5(d_t2,k_t2_offset,k_i1_local,k_i1_offset,
     &               d_i0,k_i0_offset)
c - T1/X1 LOCALIZATION --
         if(.not.MA_POP_STACK(l_i1_local))
     &      call errquit('l_i1_local',2,MA_ERR)
c -----------------------
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL OFFSET_ccsd_t2_6_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_t2_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_t2_6_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsd_t2_6_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsd_t2_6_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsd_t2_6_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL ccsd_t2_6_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsd_t2_6_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
      CALL ccsd_t2_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsd_t2_6(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
!
!
!
      CALL OFFSET_ccsd_t2_7_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_t2_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_t2_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ccsd_t2_7_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL ccsd_t2_7_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsd_t2_7(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('ccsd_t2',-1,MA_ERR)
!
!
!
      CALL OFFSET_vt1t1_1_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('vt1t1_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL vt1t1_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL vt1t1_1(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('vt1t1',-1,MA_ERR)
      CALL c2f_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
      cpu = - util_cpusec()
      wall = - util_wallsec()
!
!
!
      if (.not.rtdb_get(rtdb,'tce:ccsd_t2_8_alg',mt_int,1,
     1                  ccsd_t2_8_alg)) then
        ccsd_t2_8_alg = 2
      endif
      if (ccsd_t2_8_alg.eq.1) then
        CALL ccsd_t2_8(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i0,k_i0_offset)
      else if (ccsd_t2_8_alg.eq.2) then
        CALL ccsd_t2_8_test(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                      d_i0,k_i0_offset,maxh,maxp)
      else if (ccsd_t2_8_alg.eq.3) then
        CALL ccsd_t2_8_spiral(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                        d_i0,k_i0_offset)
      else if (ccsd_t2_8_alg.eq.4) then
        CALL ccsd_t2_8_task_dgemm(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                            d_i0,k_i0_offset,maxh,maxp)
      else if (ccsd_t2_8_alg.eq.5) then
        CALL ccsd_t2_8_task_loops(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                            d_i0,k_i0_offset,maxh,maxp)
#if defined(USE_OPENMP) && defined(USE_OPENMP_TASKS)
      else if (ccsd_t2_8_alg.eq.6) then
        CALL ccsd_t2_8_loops_driver(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                              d_i0,k_i0_offset,maxh,maxp)
      else if (ccsd_t2_8_alg.eq.7) then
        CALL ccsd_t2_8_dgemm_driver(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                              d_i0,k_i0_offset,maxh,maxp)
#endif
#ifdef USE_TCE_CUBLAS
      else if (ccsd_t2_8_alg.eq.8) then
        CALL ccsd_t2_8_cublas(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                        d_i0,k_i0_offset,maxh,maxp)
#endif
      else
        CALL errquit('ccsd_t2_8_alg',ccsd_t2_8_alg,INPUT_ERR)
      endif
!
!
!
      cpu = cpu + util_cpusec()
      wall = wall + util_wallsec()
      cpusecs(37) = cpu
      cpusecs(38) = wall
      CALL c2d_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
      RETURN
      END





      SUBROUTINE ccsd_t2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_v + = 1 * v ( p3 p4 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b, p4b, h1b, h2b, p3b_1, p4b_1, h1b_1, h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = p3b,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(p3b,p4b,h1b,h2b,
     1                              p3b_1,p4b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     2              CALL ERRQUIT('ccsd_t2_1',1,MA_ERR)
               if(.not.intorb) then
                CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + 
     3               (noab+nvab) * (p3b_1 - 1)))))
               else
                CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + 
     3               (noab+nvab) * (p3b_1 - 1)))),
     4               h2b_1,h1b_1,p4b_1,p3b_1)
               end if
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_1',4,MA_ERR)
              END IF
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END






      SUBROUTINE ccsd_t2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,p4b,h1b,h2b,h10b,p3b_1,h10b_1,p4b_2,h10b_2,h1b_2,h2b_2
      INTEGER dim_common, dima_sort, dimb_sort, dima, dimb, dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c
#ifdef LOCAL_COPY
      INTEGER l_a
#else
      INTEGER offset_a
#endif
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_v,irrep_t)) THEN
            IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('ccsd_t2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h10b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h10b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-1)) 
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h10b,p3b_1,h10b_1)
                 CALL TCE_RESTRICTED_4(p4b,h10b,h1b,h2b,
     1                                 p4b_2,h10b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h10b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+p4b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
#ifdef LOCAL_COPY
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1                 CALL ERRQUIT('ccsd_t2_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1                 int_mb(k_a_offset),
     2                 (h10b_1 - 1 + noab * (p3b_1 - noab - 1)))
#else
                  call tce_hash(int_mb(k_a_offset),
     1                          (h10b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a
#endif
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     1                 CALL ERRQUIT('ccsd_t2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1                 CALL ERRQUIT('ccsd_t2_2',5,MA_ERR)
                  CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                 int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                 (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * 
     3                 (p4b_2 - noab - 1)))))
                  CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                 int_mb(k_range+p4b-1),int_mb(k_range+h10b-1),
     2                 int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                 4,3,1,2,1.0d0)
                  IF (.not.MA_POP_STACK(l_b)) 
     1                 CALL ERRQUIT('ccsd_t2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     1                 CALL ERRQUIT('ccsd_t2_2',7,MA_ERR)
#ifdef LOCAL_COPY
                  IF (.not.MA_POP_STACK(l_a)) 
     1                 CALL ERRQUIT('ccsd_t2_2',8,MA_ERR)
#endif
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('ccsd_t2_2',9,MA_ERR)
              IF ((p3b .le. p4b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              4,3,2,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
              END IF
              IF ((p4b .le. p3b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              3,4,2,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p3b - noab - 1 + nvab * 
     3              (p4b - noab - 1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('ccsd_t2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('ccsd_t2_2',11,MA_ERR)
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,p3b_1,h10b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,h2b,
     1                              p3b_1,h10b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as)) 
     1              CALL ERRQUIT('ccsd_t2_2_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_1',1,MA_ERR)
               IF ((h10b .le. p3b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),
     2              (h2b - 1 + noab * (h1b - 1 + noab * 
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('ccsd_t2_2_1',5,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END








      SUBROUTINE ccsd_t2_2_2(d_a,k_a_offset,d_b,k_b_offset,
     1                       d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,h11b,p3b_1,h11b_1
      INTEGER h10b_2,h11b_2,h1b_2,h2b_2
      INTEGER dim_common,dima_sort,dima,dimb_sort,dimb,dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c
#ifdef LOCAL_COPY
      INTEGER l_a
#else
      INTEGER offset_a
#endif
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_v,irrep_t)) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('ccsd_t2_2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h11b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h11b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h11b-1)) 
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h11b,p3b_1,h11b_1)
                 CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                                 h10b_2,h11b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h11b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+h10b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
#ifdef LOCAL_COPY
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1                 int_mb(k_a_offset),
     2                 (h11b_1-1 + noab * (p3b_1-noab-1)))
#else
                  call tce_hash(int_mb(k_a_offset),
     1                          (h11b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a
#endif
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',5,MA_ERR)
                  IF ((h11b .lt. h10b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                  (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * 
     3                  (h11b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,2,1,-1.0d0)
                  END IF
                  IF ((h10b .le. h11b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                  (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * 
     3                  (h10b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h10b-1),int_mb(k_range+h11b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,1,2,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_b)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',7,MA_ERR)
#ifdef LOCAL_COPY
                  IF (.not.MA_POP_STACK(l_a)) 
     1                 CALL ERRQUIT('ccsd_t2_2_2',8,MA_ERR)
#endif
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('ccsd_t2_2_2',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1             int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2             int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     3             4,3,2,1,1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1             int_mb(k_c_offset),(h2b - 1 + noab * 
     2             (h1b - 1 + noab * (h10b - 1 + noab * 
     3             (p3b - noab - 1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('ccsd_t2_2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('ccsd_t2_2_2',11,MA_ERR)
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,h2b,h10b_1,h11b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                              h10b_1,h11b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_2_1',1,MA_ERR)
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,h11b_1,h10b_1)
                end if
                CALL DSCAL(dimc,-1.0d0,dbl_mb(k_a),1)
                CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1               int_mb(k_c_offset),(h2b - 1 + noab * 
     2               (h1b - 1 + noab * (h11b - 1 + noab * 
     3               (h10b - 1)))))
                IF (.not.MA_POP_STACK(l_a)) 
     1               CALL ERRQUIT('ccsd_t2_2_2_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END









      SUBROUTINE ccsd_t2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,h2b,p5b,h10b_2,h11b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h10
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-
     &1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,p5b,h10b_1,h11b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,p5b,
     1                              h10b_1,h11b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_2_2_1',1,MA_ERR)
               IF ((h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,h11b_1,h10b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p5b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_2_2_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END







      SUBROUTINE ccsd_t2_2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p5b,p6b,h10b_2,h11b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_2_2',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,2,1,3,-1.0d0)
      END IF
      IF ((p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-
     &1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_2_2',6,MA_ER
     &R)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_2_2',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_2_2',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_2_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_2_2',11
     &,MA_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p7b,p8b,h1b,h2b,p7b_1,p8b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p7b,p8b,h10b_2,h11b_2,p7b_2,p8b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_2_3',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p8b_2,p7b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p7b-1),int_mb(k_range+p8b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_3',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_3',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_3',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h11b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-
     &1),2,1,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_3',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_3',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,h2b,p5b,p3b_2,h10b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (p3b
     &_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_3',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,p5b,p3b_1,h10b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,p5b,
     1                              p3b_1,h10b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as))
     1              CALL ERRQUIT('ccsd_t2_2_3_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_3_1',1,MA_ERR)
               IF ((h10b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),
     2              (p5b - noab - 1 + nvab * (h1b - 1 + noab * 
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_3_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('ccsd_t2_2_3_1',5,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,p3b_2,h10b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',5,MA_ERR)
      IF ((h10b .le. p3b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,-1.0d0)
      END IF
      IF ((h10b .le. p3b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_3_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_3_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_3_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_3_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h2b,p3b_1,p5b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_2(h10b,p5b,h10b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_4',2,MA_ERR)
      IF ((p5b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((p3b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h10b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p5b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_4',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_4',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,1,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_4',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b, p5b, h10b_1, p5b_1
      INTEGER dim_common, dima_sort, dima, dimc
      INTEGER k_as, l_as, k_a, l_a, k_c, l_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO p5b = noab+1,noab+nvab
         IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1                            +int_mb(k_spin+p5b-1).ne.4)) THEN
          IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) 
     1         .eq. irrep_f) THEN
        IF (next.eq.count) THEN
            dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            CALL TCE_RESTRICTED_2(h10b,p5b,h10b_1,p5b_1)
            dim_common = 1
            dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            dima = dim_common * dima_sort
            IF (dima .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',0,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1            int_mb(k_a_offset),
     2            (p5b_1 - 1 + (noab+nvab) * (h10b_1 - 1)))
             CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     1            int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),
     2            2,1,1.0d0)
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',2,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',3,MA_ERR)
             CALL TCE_SORT_2(dbl_mb(k_as),dbl_mb(k_c),
     1            int_mb(k_range+p5b-1),int_mb(k_range+h10b-1),
     2            2,1,1.0d0)
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1            int_mb(k_c_offset),
     2            (p5b - noab - 1 + nvab * (h10b - 1)))
             IF (.not.MA_POP_STACK(l_c)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',4,MA_ERR)
             IF (.not.MA_POP_STACK(l_as)) 
     1            CALL ERRQUIT('ccsd_t2_2_4_1',5,MA_ERR)
            END IF
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,p5b,p6b,h10b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',5,MA_ERR)
      IF ((h7b .le. h10b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. h10b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_4_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_4_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_4_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_4_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p9b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p9b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p9b,h1b,h7b,p3b_1,p9b_1,h1b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,h2b,p9b,h10b_2,h7b_2,h2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_5',2,MA_ERR)
      IF ((p9b .lt. p3b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p9b .lt. p3b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_5',5,MA_ERR)
      IF ((h7b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h7b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h10b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_5',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_5',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_5',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_5',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h7b,h10b,h1b,p9b,h7b_1,h10b_1,h1b_1,p9b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
       DO h10b = h7b,noab
        DO h1b = 1,noab
         DO p9b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p9b-1).ne.8)) THEN
            IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1)) THEN
             IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
              CALL TCE_RESTRICTED_4(h7b,h10b,h1b,p9b,
     1                              h7b_1,h10b_1,h1b_1,p9b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_5_1',1,MA_ERR)
               IF ((h1b .le. p9b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + 
     3                (noab+nvab) * (h7b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + 
     3                (noab+nvab) * (h7b_1 - 1)))),
     4                p9b_1,h1b_1,h10b_1,h7b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p9b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_2_5_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h10b_2
      INTEGER p9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h7b,h10b,p9b,p5b,h7b_2,h10b_2,p9b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',5,MA_ERR)
      IF ((p5b .le. p9b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p9b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((p9b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p9b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_5_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_5_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_5_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_5_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      integer p5b_in,p6b_in
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
#if 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
#else
      DO p5b_in =ga_nodeid(),ga_nodeid()+nvab-1
         p5b=mod(p5b_in,nvab)+noab+1
         DO p6b_in=ga_nodeid(),ga_nodeid()+nvab+noab-p5b
            p6b=mod(p6b_in,noab+nvab-p5b+1)+p5b
#endif
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,p3b_2,h10b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_6',5,MA_ERR)
      IF ((h10b .le. p3b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),1,2,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_6',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_6',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_6',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_6',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_6',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_6',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END







      SUBROUTINE ccsd_t2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tf + = -1 * P( 2 ) * Sum ( h9 ) * t ( p3 p4 h1 h9 )_t * i1 ( h9 h2 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h9b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h9b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_t,irrep_f)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h9b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p4b,h1b,h9b,p3b_1,p4b_1,h1b_1,h9b_1)
      CALL TCE_RESTRICTED_2(h9b,h2b,h9b_2,h2b_2)
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_4',2,MA_ERR)
      IF ((h9b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h9b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+h9b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_b),dbl_mb(k_b),dimb,
     & int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h9b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h2b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_4',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_4',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_4',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,1,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_4',11,MA_ER
     &R)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_f + = 1 * f ( h9 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, h1b, h9b_1, h1b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h1b = 1,noab
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1        +int_mb(k_spin+h1b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) 
     1         .eq. irrep_f) THEN
        IF (next.eq.count) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
            CALL TCE_RESTRICTED_2(h9b,h1b,h9b_1,h1b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('ccsd_t2_4_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),(h1b_1 - 1 + (noab+nvab) * 
     2            (h9b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),(h1b - 1 + noab * (h9b - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('ccsd_t2_4_1',4,MA_ERR)
            END IF
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END








      SUBROUTINE ccsd_t2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_ft + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, h1b, p8b, p8b_1, h1b_1, h9b_2, p8b_2
      INTEGER dim_common,dima_sort,dimb_sort,dima,dimb,dimc
      INTEGER k_as,l_as
      INTEGER k_a, l_a,k_b,l_b,k_c,l_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h1b = 1,noab
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1                            +int_mb(k_spin+h1b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) 
     1         .eq. ieor(irrep_f,irrep_t)) THEN
         IF (next.eq.count) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
            IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1           CALL ERRQUIT('ccsd_t2_4_2',0,MA_ERR)
            CALL DFILL(dimc,0.0d0,dbl_mb(k_c),1)
            DO p8b = noab+1,noab+nvab
             IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
              IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) 
     1            .eq. irrep_t) THEN
               CALL TCE_RESTRICTED_2(p8b,h1b,p8b_1,h1b_1)
               CALL TCE_RESTRICTED_2(h9b,p8b,h9b_2,p8b_2)
               dim_common = int_mb(k_range+p8b-1)
               dima_sort = int_mb(k_range+h1b-1)
               dima = dim_common * dima_sort
               dimb_sort = int_mb(k_range+h9b-1)
               dimb = dim_common * dimb_sort
               IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',1,MA_ERR)
                IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',2,MA_ERR)
                CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1               int_mb(k_a_offset),
     2               (h1b_1 - 1 + noab * (p8b_1 - noab - 1)))
                CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),
     2               2,1,1.0d0)
                IF (.not.MA_POP_STACK(l_a)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',3,MA_ERR)
                IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',5,MA_ERR)
                CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1               int_mb(k_b_offset),
     2               (p8b_2 - noab - 1 + nvab * (h9b_2 - 1)))
                CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1               1.0d0,dbl_mb(k_as),dim_common,dbl_mb(k_b),
     2               dim_common,1.0d0,dbl_mb(k_c),dima_sort)
                IF (.not.MA_POP_STACK(l_b)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',7,MA_ERR)
                IF (.not.MA_POP_STACK(l_as)) 
     1               CALL ERRQUIT('ccsd_t2_4_2',8,MA_ERR)
               END IF
              END IF
             END IF
            END DO
           CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1          int_mb(k_c_offset),
     2          (h1b - 1 + noab * (h9b - 1)))
           IF (.not.MA_POP_STACK(l_c)) 
     1          CALL ERRQUIT('ccsd_t2_4_2',10,MA_ERR)
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_f + = 1 * f ( h9 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, p8b, h9b_1, p8b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO p8b = noab+1,noab+nvab
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1                            +int_mb(k_spin+p8b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) 
     1         .eq. irrep_f) THEN
        IF (next.eq.count) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
            CALL TCE_RESTRICTED_2(h9b,p8b,h9b_1,p8b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('ccsd_t2_4_2_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),
     2            (p8b_1 - 1 + (noab+nvab) * (h9b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),
     2            (p8b - noab - 1 + nvab * (h9b - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('ccsd_t2_4_2_1',4,MA_ERR)
            END IF
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h9b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_4_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h9b,h7b,p8b,p6b,h9b_2,h7b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_4_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_4_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_4_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_4_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_4_2_2',5,MA_ERR)
      IF ((h7b .le. h9b) .and. (p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p8b_2,p6b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0)
      END IF
      IF ((h7b .le. h9b) .and. (p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p8b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,-1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p8b_2,p6b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,1,2,3,-1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p6b_2,p8b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_4_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_4_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_4_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_4_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h9b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_4_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_4_2_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 h1 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h9b_2
      INTEGER h7b_2
      INTEGER h1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_4_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h9b,h7b,h1b,p6b,h9b_2,h7b_2,h1b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_4_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_4_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_4_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_4_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_4_3',5,MA_ERR)
      IF ((h7b .le. h9b) .and. (h1b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,h1b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (h1b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p6b_2,h1b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_4_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_4_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_4_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_4_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h9b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_4_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_4_3',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_4_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_vt + = -1/2 * Sum ( h8 p6 p7 ) * t ( p6 p7 h1 h8 )_t * v ( h8 h9 p6 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p7b
      INTEGER h8b
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h9b_2
      INTEGER h8b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_4_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p6b,p7b,h1b,h8b,p6b_1,p7b_1,h1b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h9b,h8b,p6b,p7b,h9b_2,h8b_2,p6b_2,p7b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+p7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_4_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_4_4',2,MA_ERR)
      IF ((h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,3,4,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_4_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_4_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_4_4',5,MA_ERR)
      IF ((h8b .le. h9b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))),p7b_2,p6b_2,h9b_2,h8b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1)
     &,2,1,4,3,1.0d0)
      END IF
      IF ((h9b .lt. h8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p7b_2,p6b_2,h8b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1)
     &,1,2,4,3,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_4_4',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p6b .eq. p7b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_4_4',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_4_4',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_4_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h1b-1),1,2,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_4_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_4_4',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tf + = 1 * P( 2 ) * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i1 ( p4 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,p4b,h1b,h2b,p5b,p3b_1,p5b_1,h1b_1,h2b_1,p4b_2,p5b_2
      INTEGER dim_common,dima_sort,dimb_sort,dima,dimb,dimc
      INTEGER k_a,l_a,k_c,l_c,k_as,l_as,k_cs,l_cs,k_b
#ifdef LOCAL_COPY
      INTEGER l_b
#else
      INTEGER offset_b
#endif
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_t,irrep_f)) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('ccsd_t2_5',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO p5b = noab+1,noab+nvab
               IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     1             int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     1              ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h2b,
     1                                 p3b_1,p5b_1,h1b_1,h2b_1)
                 CALL TCE_RESTRICTED_2(p4b,p5b,p4b_2,p5b_2)
                 dim_common = int_mb(k_range+p5b-1)
                 dima_sort = int_mb(k_range+p3b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+p4b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1                 CALL ERRQUIT('ccsd_t2_5',1,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1                 CALL ERRQUIT('ccsd_t2_5',2,MA_ERR)
                  IF ((p5b .lt. p3b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1                  int_mb(k_a_offset),(h2b_1 - 1 + noab * 
     2                  (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * 
     3                  (p5b_1 - noab - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1                  int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,2,1,-1.0d0)
                  END IF
                  IF ((p3b .le. p5b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1                  int_mb(k_a_offset),(h2b_1 - 1 + noab * 
     2                  (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * 
     3                  (p3b_1 - noab - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1                  int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,1,2,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_a)) 
     1                 CALL ERRQUIT('ccsd_t2_5',3,MA_ERR)
#ifdef LOCAL_COPY
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1                 CALL ERRQUIT('ccsd_t2_5',5,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_b),dbl_mb(k_b),dimb,
     1                 int_mb(k_b_offset),
     2                 (p5b_2-noab-1 + nvab * (p4b_2-noab-1)))
#else
                   call tce_hash(int_mb(k_b_offset),
     1                           (p5b_2-noab-1 + nvab * (p4b_2-noab-1)),
     2                           offset_b)
                   k_b = d_b + offset_b
#endif
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_as),dim_common,dbl_mb(k_b),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
#ifdef LOCAL_COPY
                  IF (.not.MA_POP_STACK(l_b)) 
     1                 CALL ERRQUIT('ccsd_t2_5',7,MA_ERR)
#endif
                  IF (.not.MA_POP_STACK(l_as)) 
     1                 CALL ERRQUIT('ccsd_t2_5',8,MA_ERR)
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('ccsd_t2_5',9,MA_ERR)
              IF ((p3b .le. p4b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),
     2              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     3              4,1,3,2,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
              END IF
              IF ((p4b .le. p3b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),
     2              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     3              1,4,3,2,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p3b - noab - 1 + nvab * 
     3              (p4b - noab - 1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('ccsd_t2_5',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('ccsd_t2_5',11,MA_ERR)
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END



      SUBROUTINE ccsd_t2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_f + = 1 * f ( p3 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b, p5b, p3b_1, p5b_1
      INTEGER dimc
      INTEGER k_a,l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p5b = noab+1,noab+nvab
         IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1        +int_mb(k_spin+p5b-1).ne.4)) THEN
          IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
           IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) 
     1         .eq. irrep_f) THEN
        IF (next.eq.count) THEN
            dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
            CALL TCE_RESTRICTED_2(p3b,p5b,p3b_1,p5b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('ccsd_t2_5_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),(p5b_1 - 1 + 
     2            (noab+nvab) * (p3b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),(p5b - noab - 1 + nvab * 
     2            (p3b - noab - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('ccsd_t2_5_1',4,MA_ERR)
            END IF
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER p3b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      integer p6b_in,h7b_in
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab

      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
#if 0
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
#else
      do p6b_in=ga_nodeid()+1,ga_nodeid()+nvab
         p6b=mod(p6b_in,nvab)+noab+1
         do h7b_in=ga_nodeid(),ga_nodeid()+noab-1
            h7b=mod(h7b_in,noab)+1
#endif
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(p3b,h7b,p5b,p6b,p3b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_5_2',5,MA_ERR)
      IF ((h7b .le. p3b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,p3b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. p3b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,p3b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_5_2',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_5_2',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_5_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_5_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_5_2',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_vt + = -1/2 * Sum ( h7 h8 p6 ) * t ( p3 p6 h7 h8 )_t * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      integer p6b_in,h7b_in,h8b_in
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)

      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_5_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
#if 0
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
#else
      do p6b_in=ga_nodeid()+1,ga_nodeid()+nvab
         p6b=mod(p6b_in,nvab)+noab+1
         do h7b_in=ga_nodeid(),ga_nodeid()+noab-1
            h7b=mod(h7b_in,noab)+1
            DO h8b = h7b,noab
c            DO h8b_in = ga_nodeid(),ga_nodeid()+noab-h7b
c            h8b = mod(h8b,noab-h7b+1)+h7b
#endif
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p6b,h7b,h8b,p3b_1,p6b_1,h7b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p5b,p6b,h7b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_5_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_5_3',2,MA_ERR)
      IF ((p6b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,2,4,3,1,-1.0d0)
      END IF
      IF ((p3b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,1,4,3,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_5_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_5_3',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,h8b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,h8b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_5_3',6,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_as),dim_common,dbl_mb(k
     &_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_5_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_5_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_5_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_5_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_5_3',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1/2 * Sum ( h11 h9 ) * t ( p3 p4 h9 h11 )_t * i1 ( h9 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h9b
      INTEGER h11b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h11b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p4b,h9b,h11b,p3b_1,p4b_1,h9b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,h1b,h2b,h9b_2,h11b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h9b-1),int_mb(k_range+h11b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h9b_2 - 1)
     &))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_6',6,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h11b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_as),dim_common,dbl_mb(k
     &_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_6',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_6',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_6',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_6',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_6',11,MA_ER
     &R)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_v + = -1 * v ( h9 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b,h11b,h1b,h2b,h9b_1,h11b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h11b = h9b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(h9b,h11b,h1b,h2b,
     1                              h9b_1,h11b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_6_1',1,MA_ERR)
               if(.not.intorb) then
                CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3               (noab+nvab) * (h9b_1 - 1)))))
               else
                CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3               (noab+nvab) * (h9b_1 - 1)))),
     4               h2b_1,h1b_1,h11b_1,h9b_1)
               end if
               CALL DSCAL(dimc,-1.0d0,dbl_mb(k_a),1)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * (h1b - 1 + noab
     2              * (h11b - 1 + noab * (h9b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_6_1',4,MA_ERR)
              END IF
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 h11 h2 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_6_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p8b,h1b,p8b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,h2b,p8b,h9b_2,h11b_2,h2b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_6_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_6_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p8b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_6_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_6_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h9b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_6_2',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_6_2',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_6_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_6_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_6_2',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_6_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_v + = 1 * v ( h9 h11 h1 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b,h11b,h1b,p8b,h9b_1,h11b_1,h1b_1,p8b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h11b = h9b,noab
        DO h1b = 1,noab
         DO p8b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p8b-1).ne.8)) THEN
            IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1)) THEN
             IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) 
     2           .eq. irrep_v) THEN
           IF (next.eq.count) THEN
              dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
              CALL TCE_RESTRICTED_4(h9b,h11b,h1b,p8b,
     1                              h9b_1,h11b_1,h1b_1,p8b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_6_2_1',1,MA_ERR)
               IF ((h1b .le. p8b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p8b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h9b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p8b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h9b_1 - 1)))),
     4                p8b_1,h1b_1,h11b_1,h9b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p8b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_6_2_1',4,MA_ERR)
              END IF
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_6_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_vt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h9 h11 p6 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_6_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,p8b,p6b,h9b_2,h11b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_6_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_6_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_6_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_6_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_6_2_2',5,MA_ERR)
      IF ((p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p8b_2,p6b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p6b_2,p8b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_6_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_6_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_6_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_6_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_6_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_6_2_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_vt + = -1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h9 h11 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_6_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,p5b,p6b,h9b_2,h11b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_6_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_6_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_6_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_6_3',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p6b_2,p5b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_6_3',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_6_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_6_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_6_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h11b-1
     &),int_mb(k_range+h9b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),2,1,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_6_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_6_3',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 4 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER h6b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER p4b_2
      INTEGER h6b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,p3b_1,p5b_1,h1b_1,h6b_1)
      CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,p4b_2,h6b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_7',2,MA_ERR)
      IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_7',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(h6b_2 -1 + noab * (p5b_2 - noab -1 +nvab * (h2b_2 - 1 + noab *
     &( p4b_2 - noab -1 )))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1)
     &,3,1,2,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_7',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_7',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_7',9,MA_ERR)
      IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_7',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_7',11,MA_ER
     &R)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      subroutine c2f_t2_t12(d_t1,k_t1_offset,
     1                     d_t2,k_t2_offset)
c
c $Id$
c
      implicit none
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "util.fh"
#include "stdio.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
      integer d_t1
      integer d_t2
      integer p1b
      integer p2b
      integer h3b
      integer h4b
      integer p1
      integer p2
      integer h3
      integer h4
      integer k_t1_offset
      integer k_t2_offset
      integer size
      integer l_t1,k_t1
      integer l_t2,k_t2
      integer i
      integer nprocs
      integer count
      integer next
cc      integer nxtask
cc      external nxtask
      INTEGER NXTASK
      EXTERNAL NXTASK
c 
      logical isa1,isa2,isa3,isa4
      integer sizea1,sizea2,sizea3,sizea4
      integer l_amp1,k_amp1
      integer l_amp2,k_amp2
      integer l_amp3,k_amp3
      integer l_amp4,k_amp4
      integer ipos1,ipos2,ipos3,ipos4
      integer spinsum
      integer pp2b,hh4b
      double precision xmax,xmoj
      logical nodezero
      logical noloadbalance
c 
c
c     ================
c     Loop over blocks
c     ================
c
c ===================
c  NON RHF REFERENCE
c ===================
c ----------------------------------------------
      if(.not.restricted) THEN
c ----------------------------------------------
      nodezero = (ga_nodeid().eq.0)
      noloadbalance = ((ioalg.eq.4).or.
     1                ((ioalg.eq.6).and.(.not.fileisga(d_t2))))
      nprocs = ga_nnodes()
      count = 0
cc      next = nxtask(nprocs,1)
      next = NXTASK(nprocs, 1)
      do p1b = noab+1,noab+nvab
        do p2b = p1b,noab+nvab
          do h3b = 1,noab
            do h4b = h3b,noab
cccx              if (next.eq.count) then
                if (util_print('t2',print_debug))
     1            write(LuOut,9200) p1b,p2b,h3b,h4b,ga_nodeid()
                if (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) 
     1            .eq. int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) then
                if ((.not.restricted)) then !repetition but who cares
cccx                if (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),
cccx     1            ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1))))
cccx     2            .eq. 0) then
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
c
              if (noloadbalance.or.(next.eq.count)) then
c
                 size = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     1                * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
                 if (.not.ma_push_get(mt_dbl,size,'t2',l_t2,k_t2))
     1             call errquit('tce_guess_t2: MA problem',0,MA_ERR)
                  call get_hash_block(d_t2,dbl_mb(k_t2),size,
     1              int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2              *noab+h3b-1)*noab+h4b-1))
c test for T1 amplitudes 
               sizea1 = int_mb(k_range+p1b-1) * int_mb(k_range+h3b-1)
               sizea2 = int_mb(k_range+p2b-1) * int_mb(k_range+h4b-1)
               sizea3 = int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
               sizea4 = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1) 
               isa1=.false.
               isa2=.false.
               isa3=.false.
               isa4=.false.
c test1
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition 
       isa1=.true.
      END IF
      END IF
      END IF 
c test2
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition 
       isa2=.true.
      END IF
      END IF
      END IF
c test3
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition 
       isa3=.true.
      END IF
      END IF
      END IF
c test4
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition 
       isa4=.true.
      END IF
      END IF
      END IF
c T1 test - done
c T1 memory allocations
      IF(isa1.and.isa2) THEN 
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h4b-1))
      END IF 
      IF(isa3.and.isa4) THEN
              if (.not.ma_push_get(mt_dbl,sizea3,'t3xa',l_amp3,k_amp3))
     1          call errquit('tce_fuse_t3xa: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea4,'t4xa',l_amp4,k_amp4))
     1          call errquit('tce_fuse_t4xa: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp3),sizea3,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp4),sizea4,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h4b-1))
      END IF
c
c
                 i = 0
                 do p1 = 1,int_mb(k_range+p1b-1)
                   do p2 = 1,int_mb(k_range+p2b-1)
                     do h3 = 1,int_mb(k_range+h3b-1)
                       do h4 = 1,int_mb(k_range+h4b-1)
                         i = i + 1
                    if(isa1.and.isa2) THEN 
                      ipos1=(p1-1)*int_mb(k_range+h3b-1)+h3
                      ipos2=(p2-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)+
     &                   dbl_mb(k_amp1+ipos1-1)*
     &                   dbl_mb(k_amp2+ipos2-1)
                    END IF
                    if(isa3.and.isa4) THEN
                      ipos3=(p2-1)*int_mb(k_range+h3b-1)+h3
                      ipos4=(p1-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)-
     &                   dbl_mb(k_amp3+ipos3-1)*
     &                   dbl_mb(k_amp4+ipos4-1)
                    END IF 
                       enddo
                     enddo
                   enddo
                 enddo
                 if (util_print('t2',print_debug))
     1             call ma_print_compact(dbl_mb(k_t2),size,1,'t2')
                 call put_hash_block(d_t2,dbl_mb(k_t2),size,
     1             int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2             *noab+h3b-1)*noab+h4b-1))
c deallocation
              IF(isa3.and.isa4) THEN 
                 if (.not.ma_pop_stack(l_amp4))
     1             call errquit('tce_fuse_t4: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp3))
     1             call errquit('tce_fuse_t3: MA problem',1,MA_ERR)
              END IF
              IF(isa1.and.isa2) THEN
                 if (.not.ma_pop_stack(l_amp2))
     1             call errquit('tce_fuse_t2: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp1))
     1             call errquit('tce_fuse_t1: MA problem',1,MA_ERR)
              END IF
c
                 if (.not.ma_pop_stack(l_t2))
     1             call errquit('tce_guess_t2: MA problem',1,MA_ERR)
              next = NXTASK(nprocs, 1)
              endif
              count = count + 1
                endif
                endif
                endif
cc                next = nxtask(nprocs,1)
            enddo
          enddo
        enddo
      enddo
cc      next = nxtask(-nprocs,1)
      next = NXTASK(-nprocs, 1)
      call ga_sync()
c 
c ----------------------------------------
       end if !not restricted 
c ----------------------------------------

 9200 format(/,4i3,' has been assigned to node ',i3)
c
c
c ========================
c   RHF REFERENCE
c ========================
      if(restricted) then
c ---------------------------------
      nodezero = (ga_nodeid().eq.0)
      noloadbalance = ((ioalg.eq.4).or.
     1                ((ioalg.eq.6).and.(.not.fileisga(d_t2))))
      nprocs = ga_nnodes()
      count = 0
cc      next = nxtask(nprocs,1)
      next = NXTASK(nprocs, 1)
      do p1b = noab+1,noab+nvab
        do p2b = p1b,noab+nvab
          do h3b = 1,noab
            do h4b = h3b,noab
cccx              if (next.eq.count) then
                if (util_print('t2',print_debug))
     1            write(LuOut,9200) p1b,p2b,h3b,h4b,ga_nodeid()
                if (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)
     1            .eq. int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) then
                if ((int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     2            int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)).ne.8) then  ! 4beta case eliminated
cccx                if (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),
cccx     1            ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1))))
cccx     2            .eq. 0) then
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
c
                 if (noloadbalance.or.(next.eq.count)) then
c
         SPINSUM=int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     2            int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)
c
                 size = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     1                * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
                 if (.not.ma_push_get(mt_dbl,size,'t2',l_t2,k_t2))
     1             call errquit('tce_guess_t2: MA problem',0,MA_ERR)
                  call get_hash_block(d_t2,dbl_mb(k_t2),size,
     1              int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2              *noab+h3b-1)*noab+h4b-1))
c test for T1 amplitudes
               sizea1 = int_mb(k_range+p1b-1) * int_mb(k_range+h3b-1)
               sizea2 = int_mb(k_range+p2b-1) * int_mb(k_range+h4b-1)
               sizea3 = int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
               sizea4 = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1)
               isa1=.false.
               isa2=.false.
               isa3=.false.
               isa4=.false.
c test1
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition 
       isa1=.true.
      END IF
      END IF
      END IF
c test2
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition 
       isa2=.true.
      END IF
      END IF
      END IF
c test3
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition 
       isa3=.true.
      END IF
      END IF
      END IF
c test4
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition 
       isa4=.true.
      END IF
      END IF
      END IF
c T1 test - done
c T1 memory allocations
      IF(isa1.and.isa2) THEN
       IF(SPINSUM.eq.4) THEN  !4alfa
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h4b-1))
       END IF
       IF(SPINSUM.EQ.6) THEN !alfa beta -> alfa beta
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            pp2b=int_mb(k_alpha+p2b-1)
            hh4b=int_mb(k_alpha+h4b-1)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((pp2b-noab-1)*noab+hh4b-1))
       END IF
      END IF
      IF(isa3.and.isa4) THEN
       IF(SPINSUM.EQ.4) THEN
              if (.not.ma_push_get(mt_dbl,sizea3,'t3xa',l_amp3,k_amp3))
     1          call errquit('tce_fuse_t3: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea4,'t4xa',l_amp4,k_amp4))
     1          call errquit('tce_fuse_t4: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp3),sizea3,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp4),sizea4,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h4b-1))
       END IF
      END IF
c
                 i = 0
                 do p1 = 1,int_mb(k_range+p1b-1)
                   do p2 = 1,int_mb(k_range+p2b-1)
                     do h3 = 1,int_mb(k_range+h3b-1)
                       do h4 = 1,int_mb(k_range+h4b-1)
                         i = i + 1
                    if(isa1.and.isa2) THEN
                      ipos1=(p1-1)*int_mb(k_range+h3b-1)+h3
                      ipos2=(p2-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)+
     &                   dbl_mb(k_amp1+ipos1-1)*
     &                   dbl_mb(k_amp2+ipos2-1)
                    END IF
                    if(isa3.and.isa4) THEN
                      ipos3=(p2-1)*int_mb(k_range+h3b-1)+h3
                      ipos4=(p1-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)-
     &                   dbl_mb(k_amp3+ipos3-1)*
     &                   dbl_mb(k_amp4+ipos4-1)
                    END IF
                       enddo
                     enddo
                   enddo
                 enddo
                 if (util_print('t2',print_debug))
     1             call ma_print_compact(dbl_mb(k_t2),size,1,'t2')
                 call put_hash_block(d_t2,dbl_mb(k_t2),size,
     1             int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2             *noab+h3b-1)*noab+h4b-1))
c deallocation
              IF(isa3.and.isa4) THEN
                 if (.not.ma_pop_stack(l_amp4))
     1             call errquit('tce_fuse_t4: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp3))
     1             call errquit('tce_fuse_t3: MA problem',1,MA_ERR)
              END IF
              IF(isa1.and.isa2) THEN
                 if (.not.ma_pop_stack(l_amp2))
     1             call errquit('tce_fuse_t2: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp1))
     1             call errquit('tce_fuse_t1: MA problem',1,MA_ERR)
              END IF
c
                 if (.not.ma_pop_stack(l_t2))
     1             call errquit('tce_guess_t2: MA problem',1,MA_ERR)
c
               next = NXTASK(nprocs, 1)
              endif
              count = count + 1
c
                endif
                endif
                endif
cc                next = nxtask(nprocs,1)
            enddo
          enddo
        enddo
      enddo
cc      next = nxtask(-nprocs,1)
      next = NXTASK(-nprocs, 1)
      call ga_sync()
c ----------------------------------------
       end if !restricted
c ----------------------------------------
      return
      end
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
      subroutine c2d_t2_t12(d_t1,k_t1_offset,
     1                     d_t2,k_t2_offset)
c
c $Id$
c
      implicit none
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "util.fh"
#include "stdio.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
      integer d_t1
      integer d_t2
      integer p1b
      integer p2b
      integer h3b
      integer h4b
      integer p1
      integer p2
      integer h3
      integer h4
      integer k_t1_offset
      integer k_t2_offset
      integer size
      integer l_t1,k_t1
      integer l_t2,k_t2
      integer i
      integer nprocs
      integer count
      integer next
cc      integer nxtask
cc      external nxtask
      INTEGER NXTASK
      EXTERNAL NXTASK
c 
      logical isa1,isa2,isa3,isa4
      integer sizea1,sizea2,sizea3,sizea4
      integer l_amp1,k_amp1
      integer l_amp2,k_amp2
      integer l_amp3,k_amp3
      integer l_amp4,k_amp4
      integer ipos1,ipos2,ipos3,ipos4
      integer spinsum
      integer pp2b,hh4b
      logical nodezero
      logical noloadbalance
c 
c
c     ================
c     Loop over blocks
c     ================
c
c ===================
c  NON RHF REFERENCE
c ===================
c ----------------------------------------------
      if(.not.restricted) THEN
c ----------------------------------------------
      nodezero = (ga_nodeid().eq.0)
      noloadbalance = ((ioalg.eq.4).or.
     1                ((ioalg.eq.6).and.(.not.fileisga(d_t2))))
      nprocs = ga_nnodes()
      count = 0
cc      next = nxtask(nprocs,1)
      next = NXTASK(nprocs, 1)
      do p1b = noab+1,noab+nvab
        do p2b = p1b,noab+nvab
          do h3b = 1,noab
            do h4b = h3b,noab
cccx              if (next.eq.count) then
                if (util_print('t2',print_debug))
     1            write(LuOut,9200) p1b,p2b,h3b,h4b,ga_nodeid()
                if (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) 
     1            .eq. int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) then
                if ((.not.restricted)) then !repetition but who cares
cccx                if (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),
cccx     1            ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1))))
cccx     2            .eq. 0) then
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
              if (noloadbalance.or.(next.eq.count)) then
                 size = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     1                * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
                 if (.not.ma_push_get(mt_dbl,size,'t2',l_t2,k_t2))
     1             call errquit('tce_guess_t2: MA problem',0,MA_ERR)
                  call get_hash_block(d_t2,dbl_mb(k_t2),size,
     1              int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2              *noab+h3b-1)*noab+h4b-1))
c test for T1 amplitudes 
               sizea1 = int_mb(k_range+p1b-1) * int_mb(k_range+h3b-1)
               sizea2 = int_mb(k_range+p2b-1) * int_mb(k_range+h4b-1)
               sizea3 = int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
               sizea4 = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1) 
               isa1=.false.
               isa2=.false.
               isa3=.false.
               isa4=.false.
c test1
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition but who cares
       isa1=.true.
      END IF
      END IF
      END IF 
c test2
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition but who cares
       isa2=.true.
      END IF
      END IF
      END IF
c test3
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition but who cares
       isa3=.true.
      END IF
      END IF
      END IF
c test4
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((.not.restricted)) THEN ! repetition but who cares
       isa4=.true.
      END IF
      END IF
      END IF
c T1 test - done
c T1 memory allocations
      IF(isa1.and.isa2) THEN 
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h4b-1))
      END IF 
      IF(isa3.and.isa4) THEN
              if (.not.ma_push_get(mt_dbl,sizea3,'t3a',l_amp3,k_amp3))
     1          call errquit('tce_fuse_t3: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea4,'t4a',l_amp4,k_amp4))
     1          call errquit('tce_fuse_t4: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp3),sizea3,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp4),sizea4,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h4b-1))
      END IF
c
                 i = 0
                 do p1 = 1,int_mb(k_range+p1b-1)
                   do p2 = 1,int_mb(k_range+p2b-1)
                     do h3 = 1,int_mb(k_range+h3b-1)
                       do h4 = 1,int_mb(k_range+h4b-1)
                         i = i + 1
                    if(isa1.and.isa2) THEN 
                      ipos1=(p1-1)*int_mb(k_range+h3b-1)+h3
                      ipos2=(p2-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)-
     &                   dbl_mb(k_amp1+ipos1-1)*
     &                   dbl_mb(k_amp2+ipos2-1)
                    END IF
                    if(isa3.and.isa4) THEN
                      ipos3=(p2-1)*int_mb(k_range+h3b-1)+h3
                      ipos4=(p1-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)+
     &                   dbl_mb(k_amp3+ipos3-1)*
     &                   dbl_mb(k_amp4+ipos4-1)
                    END IF 
                       enddo
                     enddo
                   enddo
                 enddo
                 if (util_print('t2',print_debug))
     1             call ma_print_compact(dbl_mb(k_t2),size,1,'t2')
                 call put_hash_block(d_t2,dbl_mb(k_t2),size,
     1             int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2             *noab+h3b-1)*noab+h4b-1))
c deallocation
              IF(isa3.and.isa4) THEN 
                 if (.not.ma_pop_stack(l_amp4))
     1             call errquit('tce_fuse_t4: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp3))
     1             call errquit('tce_fuse_t3: MA problem',1,MA_ERR)
              END IF
              IF(isa1.and.isa2) THEN
                 if (.not.ma_pop_stack(l_amp2))
     1             call errquit('tce_fuse_t2: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp1))
     1             call errquit('tce_fuse_t1: MA problem',1,MA_ERR)
              END IF
c
                 if (.not.ma_pop_stack(l_t2))
     1             call errquit('tce_guess_t2: MA problem',1,MA_ERR)
c
               next = NXTASK(nprocs, 1)
              endif
              count = count + 1
c
                endif
                endif
                endif
cc                next = nxtask(nprocs,1)
            enddo
          enddo
        enddo
      enddo
cc      next = nxtask(-nprocs,1)
      next = NXTASK(-nprocs, 1)
      call ga_sync()
c 
c ----------------------------------------
       end if !not restricted 
c ----------------------------------------

 9200 format(/,4i3,' has been assigned to node ',i3)
c
c
c ========================
c   RHF REFERENCE
c ========================
      if(restricted) then
c ---------------------------------
      nodezero = (ga_nodeid().eq.0)
      noloadbalance = ((ioalg.eq.4).or.
     1                ((ioalg.eq.6).and.(.not.fileisga(d_t2))))
      nprocs = ga_nnodes()
      count = 0
cc      next = nxtask(nprocs,1)
      next = NXTASK(nprocs, 1)
      do p1b = noab+1,noab+nvab
        do p2b = p1b,noab+nvab
          do h3b = 1,noab
            do h4b = h3b,noab
cccx              if (next.eq.count) then
                if (util_print('t2',print_debug))
     1            write(LuOut,9200) p1b,p2b,h3b,h4b,ga_nodeid()
                if (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)
     1            .eq. int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) then
                if ((int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     2           int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)).ne.8) then  ! 4beta case eliminated
cccx                if (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),
cccx     1            ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1))))
cccx     2            .eq. 0) then
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
c
              if (noloadbalance.or.(next.eq.count)) then
c
         SPINSUM=int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     2            int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)
c
                 size = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     1                * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
                 if (.not.ma_push_get(mt_dbl,size,'t2',l_t2,k_t2))
     1             call errquit('tce_guess_t2: MA problem',0,MA_ERR)
                  call get_hash_block(d_t2,dbl_mb(k_t2),size,
     1              int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2              *noab+h3b-1)*noab+h4b-1))
c test for T1 amplitudes
               sizea1 = int_mb(k_range+p1b-1) * int_mb(k_range+h3b-1)
               sizea2 = int_mb(k_range+p2b-1) * int_mb(k_range+h4b-1)
               sizea3 = int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
               sizea4 = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1)
               isa1=.false.
               isa2=.false.
               isa3=.false.
               isa4=.false.
c test1
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition but who cares
       isa1=.true.
      END IF
      END IF
      END IF
c test2
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition but who cares
       isa2=.true.
      END IF
      END IF
      END IF
c test3
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition but who cares
       isa3=.true.
      END IF
      END IF
      END IF
c test4
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF (restricted) THEN ! repetition but who cares
       isa4=.true.
      END IF
      END IF
      END IF
c T1 test - done
c T1 memory allocations
      IF(isa1.and.isa2) THEN
       IF(SPINSUM.eq.4) THEN  !4alfa
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h4b-1))
       END IF
       IF(SPINSUM.EQ.6) THEN
              if (.not.ma_push_get(mt_dbl,sizea1,'t1a',l_amp1,k_amp1))
     1          call errquit('tce_fuse_t1: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea2,'t2a',l_amp2,k_amp2))
     1          call errquit('tce_fuse_t2: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp1),sizea1,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h3b-1))
            pp2b=int_mb(k_alpha+p2b-1)
            hh4b=int_mb(k_alpha+h4b-1)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp2),sizea2,
     1        int_mb(k_t1_offset),((pp2b-noab-1)*noab+hh4b-1))
       END IF
      END IF
      IF(isa3.and.isa4) THEN
       IF(SPINSUM.EQ.4) THEN
              if (.not.ma_push_get(mt_dbl,sizea3,'t3a',l_amp3,k_amp3))
     1          call errquit('tce_fuse_t3: MA problem',0,MA_ERR)
              if (.not.ma_push_get(mt_dbl,sizea4,'t4a',l_amp4,k_amp4))
     1          call errquit('tce_fuse_t4: MA problem',0,MA_ERR)
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp3),sizea3,
     1        int_mb(k_t1_offset),((p2b-noab-1)*noab+h3b-1))
            call get_hash_block_ma(dbl_mb(d_t1),dbl_mb(k_amp4),sizea4,
     1        int_mb(k_t1_offset),((p1b-noab-1)*noab+h4b-1))
       END IF
      END IF
c
                 i = 0
                 do p1 = 1,int_mb(k_range+p1b-1)
                   do p2 = 1,int_mb(k_range+p2b-1)
                     do h3 = 1,int_mb(k_range+h3b-1)
                       do h4 = 1,int_mb(k_range+h4b-1)
                         i = i + 1
                    if(isa1.and.isa2) THEN
                      ipos1=(p1-1)*int_mb(k_range+h3b-1)+h3
                      ipos2=(p2-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)-
     &                   dbl_mb(k_amp1+ipos1-1)*
     &                   dbl_mb(k_amp2+ipos2-1)
                    END IF
                    if(isa3.and.isa4) THEN
                      ipos3=(p2-1)*int_mb(k_range+h3b-1)+h3
                      ipos4=(p1-1)*int_mb(k_range+h4b-1)+h4
                         dbl_mb(k_t2+i-1) = dbl_mb(k_t2+i-1)+
     &                   dbl_mb(k_amp3+ipos3-1)*
     &                   dbl_mb(k_amp4+ipos4-1)
                    END IF
                       enddo
                     enddo
                   enddo
                 enddo
                 if (util_print('t2',print_debug))
     1             call ma_print_compact(dbl_mb(k_t2),size,1,'t2')
                 call put_hash_block(d_t2,dbl_mb(k_t2),size,
     1             int_mb(k_t2_offset),((((p1b-noab-1)*nvab+p2b-noab-1)
     2             *noab+h3b-1)*noab+h4b-1))
c deallocation
              IF(isa3.and.isa4) THEN
                 if (.not.ma_pop_stack(l_amp4))
     1             call errquit('tce_fuse_t4: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp3))
     1             call errquit('tce_fuse_t3: MA problem',1,MA_ERR)
              END IF
              IF(isa1.and.isa2) THEN
                 if (.not.ma_pop_stack(l_amp2))
     1             call errquit('tce_fuse_t2: MA problem',1,MA_ERR)
                 if (.not.ma_pop_stack(l_amp1))
     1             call errquit('tce_fuse_t1: MA problem',1,MA_ERR)
              END IF
c
                 if (.not.ma_pop_stack(l_t2))
     1             call errquit('tce_guess_t2: MA problem',1,MA_ERR)
c
              next = NXTASK(nprocs, 1)
              endif
              count = count + 1
c
                endif
                endif
                endif
cc                next = nxtask(nprocs,1)
            enddo
          enddo
        enddo
      enddo
cc      next = nxtask(-nprocs,1)
      next = NXTASK(-nprocs, 1)
      call ga_sync()
c ----------------------------------------
       end if !restricted
c ----------------------------------------
      return
      end
c
c
c
c
c
      SUBROUTINE lccsd_t2_3x(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * v ( p3 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('lccsd_t2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,p4b,h2b,p5b,p3b_2,p4b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('lccsd_t2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &lccsd_t2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('lccsd_t2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('lccsd_t2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &lccsd_t2_3',5,MA_ERR)
      IF ((h2b .le. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))),p5b_2,h2b_2,p4b_2,p3b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('lccsd_t2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('lccsd_t2_3',7,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('lccsd_t2_3',8,MA_ER
     &R)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &lccsd_t2_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('lccsd_t2_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('lccsd_t2_3',11,MA_E
     &RR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
c
c
c
c
c
c
c
c
c
c
c
c
      SUBROUTINE vt1t1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vtt + = -1/2 * P( 2 ) * Sum ( h5 ) * t ( p3 h5 )_t * i1 ( h5 p4 h1 h2 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h5b
      INTEGER p3b_1
      INTEGER h5b_1
      INTEGER p4b_2
      INTEGER h5b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_t
     &,irrep_t))) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('vt1t1_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h5b,p3b_1,h5b_1)
      CALL TCE_RESTRICTED_4(p4b,h5b,h1b,h2b,p4b_2,h5b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('vt1t1_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &vt1t1_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h5b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h5b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('vt1t1_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('vt1t1_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &vt1t1_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h5b_2 - 1 + noab * (p4b_2 - noa
     &b - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('vt1t1_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('vt1t1_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('vt1t1_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &vt1t1_1',9,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,3,4,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('vt1t1_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('vt1t1_1',11,MA_ERR)
c
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
c
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END


      SUBROUTINE vt1t1_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p3 h1 h2 )_vt + = -2 * P( 2 ) * Sum ( p6 ) * t ( p6 h1 )_t * v ( h5 p3 h2 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h5b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h5b_2
      INTEGER h2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('vt1t1_1_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h5b,h2b,p6b,p3b_2,h5b_2,h2b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('vt1t1_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &vt1t1_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('vt1t1_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('vt1t1_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &vt1t1_1_2',5,MA_ERR)
      IF ((h5b .le. p3b) .and. (h2b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))),p6b_2,h2b_2,p3b_2,h5b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('vt1t1_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('vt1t1_1_2',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('vt1t1_1_2',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &vt1t1_1_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-2.0d0/1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h5b - 1 + noab * (p3b - noab - 1)))
     &))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,1,4,2.0d0/1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h5b - 1 + noab * (p3b - noab - 1)))
     &))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('vt1t1_1_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('vt1t1_1_2',11,MA_ER
     &R)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
c
c
c
c
c
c
c
c
c
      SUBROUTINE half_t1t1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tt + = 1/2 * P( 4 ) * t ( p3 h1 )_t * t ( p4 h2 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_t,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('half_t1t1_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h1b,p3b_1,h1b_1)
      CALL TCE_RESTRICTED_2(p4b,h2b,p4b_2,h2b_2)
      dim_common = 1
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('half_t1t1_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &half_t1t1_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('half_t1t1_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('half_t1t1_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &half_t1t1_1',5,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_b),dbl_mb(k_b),dimb,
     & int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (p4b_2 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h2b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('half_t1t1_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('half_t1t1_1',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('half_t1t1_1',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &half_t1t1_1',9,MA_ERR)
      IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,3,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,1,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,3,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,1,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('half_t1t1_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('half_t1t1_1',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
c
c
c
c
c
c
c
      SUBROUTINE m_half_t1t1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tt + = -1/2 * P( 4 ) * t ( p3 h1 )_t * t ( p4 h2 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_t,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('m_half_t1t1_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h1b,p3b_1,h1b_1)
      CALL TCE_RESTRICTED_2(p4b,h2b,p4b_2,h2b_2)
      dim_common = 1
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('m_half_t1t1_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &m_half_t1t1_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('m_half_t1t1_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('m_half_t1t1_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &m_half_t1t1_1',5,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_b),dbl_mb(k_b),dimb,
     & int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (p4b_2 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h2b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('m_half_t1t1_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('m_half_t1t1_1',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('m_half_t1t1_1',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &m_half_t1t1_1',9,MA_ERR)
      IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,3,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,1,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,3,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,1,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('m_half_t1t1_1',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('m_half_t1t1_1',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END


      SUBROUTINE OFFSET_vt1t1_1_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p3 h1 h2 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h5b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('vt1t1_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h5b 
     &- 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_2_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h10b
     & - 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_2_2_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     &        int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     &         ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &         .eq. irrep_v) THEN
            IF ((.not.restricted).or.
     &          (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)
     &          +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
             length = length + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'a',l_a_offset,k_a_offset))
     &   CALL ERRQUIT('ccsd_t2_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     &        int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     &         ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &         .eq. irrep_v) THEN
            IF ((.not.restricted).or.
     &          (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)
     &          +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
             addr = addr + 1
             int_mb(k_a_offset+addr) = h2b-1+noab*(h1b-1+noab
     &                                 *(h11b-1+noab*(h10b-1)))
             int_mb(k_a_offset+length+addr) = size
             size = size+int_mb(k_range+h10b-1)*int_mb(k_range+h11b-1)
     &                  *int_mb(k_range+h1b-1)*int_mb(k_range+h2b-1)
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      RETURN
      END



      SUBROUTINE OFFSET_ccsd_t2_2_2_2_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p5b
      length = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_2_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h11b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END


      SUBROUTINE OFFSET_ccsd_t2_2_3_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER p5b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_2_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h10b - 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_2_4_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER p5b
      length = 0
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_2_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h10b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_2_5_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h7b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_2_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h10b - 1 + noab * (h7b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_4_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h1b
      length = 0
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h1b - 1 + noab * (h9b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_4_2_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER p8b
      length = 0
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_4_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p8b - noab - 1 + nvab * (h9b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_5_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER p5b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (p3b - noab - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_6_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_6_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h11b
     & - 1 + noab * (h9b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_6_2_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER p8b
      length = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_6_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p8b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h11b - 1 + noab * (h9b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

      SUBROUTINE OFFSET_ccsd_t2_7_1(l_a_offset,k_a_offset,size)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsd_t2_7_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h6b -1 + noab * (p5b - noab -1 +nvab * (
     &h1b - 1 + noab * ( p3b - noab -1 )))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
