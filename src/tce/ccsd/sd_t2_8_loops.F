      SUBROUTINE icsd_t2_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset,
     &ctx,icounter)
C     $Id: icsd_t2.F_8p_OK 25748 2014-06-08 07:53:05Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
c old way      INTEGER NXTASK
c -------------------------
      INTEGER ctx,icounter
      external nxt_ctx_create, nxt_ctx_destroy, nxt_ctx_next
c -------------------------
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
c *** peta ****
c      logical nodezero         ! True if node 0
c      double precision cpu     ! CPU sec counter
c      double precision wall    ! WALL sec counter
c *************
c old way      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
c old way      next = NXTASK(nprocs, 1)
c --- new way ----
      call nxt_ctx_next(ctx, icounter, next)
c ----------------
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL
     & ERRQUIT('icsd_t2_8',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p3b,p4b,p5b,p6b,p3b_2,p4b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_8',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
ccx      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
ccx     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
ccx     &,4,3,2,1,1.0d0)
ccx      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_8',3,MA_ERR)
ccx      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
ccx     & ERRQUIT('icsd_t2_8',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_8',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))),p6b_2,p5b_2,p4b_2,p3b_2)
      end if
ccx      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
ccx     &,int_mb(k_range+p4b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
ccx     &,2,1,4,3,1.0d0)
ccx      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_8',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
ccx      CALL ?GEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
ccx     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
ccx     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
ccx      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('icsd_t2_8',7,MA_ERR
ccx     &)
c
      call t2_p8(int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     &           int_mb(k_range+p3b-1),int_mb(k_range+p4b-1),
     &           int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &           dbl_mb(k_a),dbl_mb(k_b),dbl_mb(k_c),
     &           1.0d0/FACTORIAL(nsuperp(1))/FACTORIAL(nsuperp(2)))
c
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_8',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_8',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
ccx      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
ccx     &icsd_t2_8',9,MA_ERR)
ccx      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
ccx     &,int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1)
ccx     &,2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
ccx      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_8',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_8',11,MA_ER
     &R)
c --- new way ----
      call nxt_ctx_next(ctx, icounter, next)
c ----------------
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
c old way      next = NXTASK(-nprocs, 1)
c old way      call GA_SYNC()
 9020 format('  T2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9021 format('  V2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9022 format('  TRANS',i4,1x,'Cpu  wall ',2(f17.12,1x))  
 9023 format('  SORT ',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9024 format('  GEMM',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9025 format(' ADD_BL',i4,1x,'Cpu  wall ',2(f17.12,1x))
      RETURN
      END

      subroutine t2_p8(h1d,h2d,p3d,p4d,p5d,p6d,
     1               t2sub,v2sub,r2sub,factor)
      IMPLICIT NONE
      integer h1d,h2d,p3d,p4d,p5d,p6d
      integer h1,h2,p3,p4,p5,p6
      double precision t2sub(h2d,h1d,p6d,p5d)
      double precision v2sub(p6d,p5d,p4d,p3d)
      double precision r2sub(h2d,h1d,p4d,p3d)
      double precision factor
      do p3=1,p3d
      do p4=1,p4d
      do h1=1,h1d
      do h2=1,h2d
      do p5=1,p5d
      do p6=1,p6d
       r2sub(h2,h1,p4,p3)=r2sub(h2,h1,p4,p3)
     & + factor*t2sub(h2,h1,p6,p5)*v2sub(p6,p5,p4,p3)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      return
      end

